#extension GL_EXT_draw_buffers : require

precision highp float;

uniform vec4 tileOffsetArr[5];
uniform vec4 visibleExtentOffsetArr[5];
uniform vec4 transparentColorArr[5];
uniform vec3 pickingColorArr[5];

uniform sampler2D defaultTexture;
uniform sampler2D samplerArr[5];
uniform int samplerCount;

varying vec2 vTextureCoord;
varying float range;

// return 1 if v inside the box, return 0 otherwise
float insideBox(vec2 v, vec2 bottomLeft, vec2 topRight) {
    vec2 s = step(bottomLeft, v) - step(topRight, v);
    return s.x * s.y;   
}

highp vec3 encode32(highp float f) {
    float F = abs(f); 
    float s = step(0.0,-f);
    float e = floor(log2(F)); 
    float m = exp2(- e) * F;
    //float m = F/exp2(e);
    e = floor(log2(F) + 127.0) + floor(log2(m));
    vec3 rgb;
    rgb[0] = 128.0 * s  + floor(e*exp2(-1.0));
    rgb[1] = 128.0 * mod(e,2.0) + mod(floor(m*128.0),128.0);  
    rgb[2] = floor(mod(floor(m*exp2(23.0 -8.0)),exp2(8.0)));
    //rgba[3] = floor(exp2(23.0)*mod(m,exp2(-15.0)));
    return rgb / 255.0;
}

const vec2 BOTTOMLEFT = vec2(0.0);
const vec2 TOPRIGHT = vec2(1.0);

void main(void) {

highp float xxx = 12.65;
highp int bb = floatBitsToInt(xxx);
	
	gl_FragData[0] = texture2D( defaultTexture, vTextureCoord );
	gl_FragData[1] = vec4(0.0);
	gl_FragData[2] = vec4(encode32(range), gl_FragData[0].a);
	if( samplerCount == 0 ) return;

	vec4 t = texture2D( samplerArr[0], tileOffsetArr[0].xy + vTextureCoord * tileOffsetArr[0].zw ) * insideBox(visibleExtentOffsetArr[0].xy + vTextureCoord * visibleExtentOffsetArr[0].zw, BOTTOMLEFT, TOPRIGHT);
	float emptiness = t.a * smoothstep(0.35, 0.5, distance( t.rgb, transparentColorArr[0].rgb ));
	gl_FragData[0] = mix( gl_FragData[0], t, transparentColorArr[0].a * emptiness);
	gl_FragData[1] = vec4(pickingColorArr[0], step(1.0, emptiness));
	gl_FragData[2] = mix( gl_FragData[2], vec4(encode32(range), 1.0), step(1.0, emptiness));
	if( samplerCount == 1 ) return;

	t = texture2D( samplerArr[1], tileOffsetArr[1].xy + vTextureCoord * tileOffsetArr[1].zw ) * insideBox(visibleExtentOffsetArr[1].xy + vTextureCoord * visibleExtentOffsetArr[1].zw, BOTTOMLEFT, TOPRIGHT);
	emptiness = t.a * smoothstep(0.35, 0.5, distance( t.rgb, transparentColorArr[1].rgb ));
	gl_FragData[0] = mix( gl_FragData[0], t, transparentColorArr[1].a * emptiness);
	gl_FragData[1] = mix( gl_FragData[1], vec4(pickingColorArr[1], 1.0), step(1.0, emptiness));
	gl_FragData[2] = mix( gl_FragData[2], vec4(encode32(range), 1.0), step(1.0, emptiness));
	if( samplerCount == 2 ) return;

	t = texture2D( samplerArr[2], tileOffsetArr[2].xy + vTextureCoord * tileOffsetArr[2].zw ) * insideBox(visibleExtentOffsetArr[2].xy + vTextureCoord * visibleExtentOffsetArr[2].zw, BOTTOMLEFT, TOPRIGHT);
	emptiness = t.a * smoothstep(0.35, 0.5, distance( t.rgb, transparentColorArr[2].rgb ));
	gl_FragData[0] = mix( gl_FragData[0], t, transparentColorArr[2].a * emptiness);
	gl_FragData[1] = mix( gl_FragData[1], vec4(pickingColorArr[2], 1.0), step(1.0, emptiness));
	gl_FragData[2] = mix( gl_FragData[2], vec4(encode32(range), 1.0), step(1.0, emptiness));
	if( samplerCount == 3 ) return;

	t = texture2D( samplerArr[3], tileOffsetArr[3].xy + vTextureCoord * tileOffsetArr[3].zw ) * insideBox(visibleExtentOffsetArr[3].xy + vTextureCoord * visibleExtentOffsetArr[3].zw, BOTTOMLEFT, TOPRIGHT);
	emptiness = t.a * smoothstep(0.35, 0.5, distance( t.rgb, transparentColorArr[3].rgb ));
	gl_FragData[0] = mix( gl_FragData[0], t, transparentColorArr[3].a * emptiness);
	gl_FragData[1] = mix( gl_FragData[1], vec4(pickingColorArr[3], 1.0), step(1.0, emptiness));
	gl_FragData[2] = mix( gl_FragData[2], vec4(encode32(range), 1.0), step(1.0, emptiness));
	if( samplerCount == 4 ) return;

	t = texture2D( samplerArr[4], tileOffsetArr[4].xy + vTextureCoord * tileOffsetArr[4].zw ) * insideBox(visibleExtentOffsetArr[4].xy + vTextureCoord * visibleExtentOffsetArr[4].zw, BOTTOMLEFT, TOPRIGHT);
	emptiness = t.a * smoothstep(0.35, 0.5, distance( t.rgb, transparentColorArr[4].rgb ));
	gl_FragData[0] = mix( gl_FragData[0], t, transparentColorArr[4].a * emptiness);
	gl_FragData[1] = mix( gl_FragData[1], vec4(pickingColorArr[4], 1.0), step(1.0, emptiness));
	gl_FragData[2] = mix( gl_FragData[2], vec4(encode32(range), 1.0), step(1.0, emptiness));
}