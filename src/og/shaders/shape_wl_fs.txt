precision highp float;

varying vec2 vTextureCoord;
varying vec3 vTransformedNormal;
varying vec4 vPosition;
	
uniform vec4 uColor;
 
#define MAX_POINT_LIGHTS 5

uniform int pointLightsQuantity;
uniform vec3 pointLightsPositions[MAX_POINT_LIGHTS];
uniform vec3 pointLightsParamsv[MAX_POINT_LIGHTS * 3];
uniform float pointLightsParamsf[MAX_POINT_LIGHTS];

void main(void) {

    vec3 lightWeighting;
	vec3 lightDirection;
	vec3 normal;
	vec3 eyeDirection;
	vec3 reflectionDirection;
	float specularLightWeighting;
	float diffuseLightWeighting;


	//i=0
    lightDirection = normalize(pointLightsPositions[0] - vPosition.xyz);
	//float distance = length(dir);
	//float attenuation = 1.0/(1.0+0.1*distance+0.01*distance*distance);
    normal = normalize(vTransformedNormal);
    eyeDirection = normalize(-vPosition.xyz);
    reflectionDirection = reflect(-lightDirection, normal);	
	specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), pointLightsParamsf[0]);
    diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);
    lightWeighting += pointLightsParamsv[0] + pointLightsParamsv[1] * diffuseLightWeighting + pointLightsParamsv[2] * specularLightWeighting;

	//i=1
/*	lightDirection = normalize(pointLightsPositions[1] - vPosition.xyz);
	normal = normalize(vTransformedNormal);
	eyeDirection = normalize(-vPosition.xyz);
	reflectionDirection = reflect(-lightDirection, normal);
	specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), pointLightsParamsf[1]);
	diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);
	lightWeighting += pointLightsParamsv[3] + pointLightsParamsv[4] * diffuseLightWeighting + pointLightsParamsv[5] * specularLightWeighting ;

	//i=2
	lightDirection = normalize(pointLightsPositions[2] - vPosition.xyz);
	normal = normalize(vTransformedNormal);
	eyeDirection = normalize(-vPosition.xyz);
	reflectionDirection = reflect(-lightDirection, normal);
	specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), pointLightsParamsf[2]);
	diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);
	lightWeighting += pointLightsParamsv[6] + pointLightsParamsv[7] * diffuseLightWeighting + pointLightsParamsv[8] * specularLightWeighting ;

	//i=3
	lightDirection = normalize(pointLightsPositions[3] - vPosition.xyz);
	normal = normalize(vTransformedNormal);
	eyeDirection = normalize(-vPosition.xyz);
	reflectionDirection = reflect(-lightDirection, normal);
	specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), pointLightsParamsf[3]);
	diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);
	lightWeighting += pointLightsParamsv[9] + pointLightsParamsv[10] * diffuseLightWeighting + pointLightsParamsv[11] * specularLightWeighting ;

	//i=4
	lightDirection = normalize(pointLightsPositions[4] - vPosition.xyz);
	normal = normalize(vTransformedNormal);
	eyeDirection = normalize(-vPosition.xyz);
	reflectionDirection = reflect(-lightDirection, normal);
	specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), pointLightsParamsf[4]);
	diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);
	lightWeighting += pointLightsParamsv[12] + pointLightsParamsv[13] * diffuseLightWeighting + pointLightsParamsv[14] * specularLightWeighting ;
*/
        
    gl_FragColor = vec4(uColor.rgb * lightWeighting, uColor.a);
}