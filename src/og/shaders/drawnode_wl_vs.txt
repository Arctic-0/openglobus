precision highp float;

attribute vec3 aVertexPosition;
attribute vec2 aTextureCoord;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform float height;
uniform vec3 cameraPosition;
uniform vec4 uGlobalTextureCoord;
uniform vec3 uNormalMapBias;

varying vec4 vTextureCoord;
varying float range;
varying vec2 vGlobalTextureCoord;
varying vec4 v_vertex;
varying float v_height;

const float C = 0.1;
const float far = 149.6e+9;
float logc = 2.0 / log( C * far + 1.0 );

void main(void) {
	v_height = height;
	vec3 heightVertex = aVertexPosition + normalize(aVertexPosition) * height;
    v_vertex = viewMatrix * vec4(heightVertex, 1.0);
	range = distance(cameraPosition, heightVertex);
	vTextureCoord.xy = aTextureCoord;
	vGlobalTextureCoord = uGlobalTextureCoord.xy + (uGlobalTextureCoord.zw - uGlobalTextureCoord.xy) * aTextureCoord;
	vTextureCoord.zw = uNormalMapBias.z * ( aTextureCoord + uNormalMapBias.xy );
    gl_Position = projectionMatrix * v_vertex;
    gl_Position.z = ( log( C * gl_Position.w + 1.0 ) * logc - 1.0 ) * gl_Position.w;
}