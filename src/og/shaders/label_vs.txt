attribute vec3 a_vertices;
attribute vec3 a_texCoord;
attribute vec3 a_positions;
attribute vec3 a_offset;
attribute float a_size;
attribute float a_rotation;
attribute vec4 a_rgba;
attribute vec3 a_alignedAxis;
attribute float a_fontIndex;
attribute vec2 a_bufferAA;

varying vec2 v_texCoords;
varying vec4 v_rgba;
varying float v_fontIndex;
varying vec2 v_bufferAA;

uniform mat4 uMVMatrix;
uniform mat4 uPMatrix;
uniform vec3 uCamPos;
uniform float uViewAngle;
uniform float uXRatio;
uniform float uZ;

const vec3 ZERO3 = vec3(0.0);

void main() {
	
	v_bufferAA = a_bufferAA;

    if(a_texCoord.z == -1.0 || a_bufferAA.x == 1.0){
	    gl_Position = vec4(0.0);
		return;
	}

	v_fontIndex = a_fontIndex;

    v_texCoords = a_texCoord.xy;
    v_rgba = a_rgba;

    vec3 look = a_positions - uCamPos;
    
	vec3 right, up;
	if(a_alignedAxis == ZERO3){
    	up = vec3( uMVMatrix[0][1], uMVMatrix[1][1], uMVMatrix[2][1] );
	    right = vec3( uMVMatrix[0][0], uMVMatrix[1][0], uMVMatrix[2][0] );
	}else{
	    up = normalize(a_alignedAxis);
    	right = normalize(cross(look,up));
    	look = cross(up,right);
	}

    float focalSize = 2.0 * length(a_positions - uCamPos) * uViewAngle * uXRatio;
    vec2 offset = a_offset.xy * focalSize;
    float scale = a_size * focalSize;
    float cosRot = cos(a_rotation);
    float sinRot = sin(a_rotation);
    vec3 rr = (right * cosRot - up * sinRot) * (scale * (a_vertices.x + a_texCoord.z) + offset.x) + (right * sinRot + up * cosRot) * (scale * a_vertices.y + offset.y) + normalize(look) * a_vertices.z + a_positions;

    gl_Position = uPMatrix * uMVMatrix * vec4(rr, 1);
	gl_Position.z += a_offset.z + uZ;
}