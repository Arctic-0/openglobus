#extension GL_OES_standard_derivatives : enable

precision highp float;

const int MAX_SIZE = 12;

uniform sampler2D u_fontTextureArr[MAX_SIZE];

varying float v_fontIndex;
varying vec2 v_texCoords;
varying vec4 v_rgba;varying vec2 v_bufferAA;
void main () {
    int fi = int(v_fontIndex);

	vec4 color;
    if (fi == 0) {
        color = texture2D(u_fontTextureArr[0], v_texCoords);
    } else if (fi == 1) {
        color = texture2D(u_fontTextureArr[1], v_texCoords);
    } else if (fi == 2) {
        color = texture2D(u_fontTextureArr[2], v_texCoords);
    } else if (fi == 3) {
        color = texture2D(u_fontTextureArr[3], v_texCoords);
    } else if (fi == 4) {
        color = texture2D(u_fontTextureArr[4], v_texCoords);
    } else if (fi == 5) {
        color = texture2D(u_fontTextureArr[5], v_texCoords);
    } else if (fi == 6) {
        color = texture2D(u_fontTextureArr[6], v_texCoords);
    } else if (fi == 7) {
        color = texture2D(u_fontTextureArr[7], v_texCoords);
    } else if (fi == 8) {
        color = texture2D(u_fontTextureArr[8], v_texCoords);
    } else if (fi == 9) {
        color = texture2D(u_fontTextureArr[9], v_texCoords);
    }else{
        color = texture2D(u_fontTextureArr[10], v_texCoords);    
    }

	float u_gamma = 0.0;

    //float alpha = smoothstep(u_buffer - u_gamma, u_buffer + u_gamma, color.r);
    float afwidth = v_bufferAA.y * length ( vec2 ( dFdx ( color.r ) , dFdy ( color.r )) );
    float alpha = smoothstep ( v_bufferAA.x - afwidth, v_bufferAA.x + afwidth, color.r );

    if( alpha <= 0.1 )
		discard;

    gl_FragColor = vec4(v_rgba.rgb, alpha * v_rgba.a);
}