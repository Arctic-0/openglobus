precision mediump float;

uniform sampler2D uSampler;
uniform sampler2D uNormalMap;

#define MAX_POINT_LIGHTS 1

uniform vec3 pointLightsPositions[MAX_POINT_LIGHTS];
uniform vec3 pointLightsParamsv[MAX_POINT_LIGHTS * 3];
uniform float pointLightsParamsf[MAX_POINT_LIGHTS];

varying vec4 vTextureCoord;
varying vec3 vNormal;
varying vec4 vPosition;
varying mat3 v_NMatrix;

void main(void) {
    
    vec3 lightWeighting;
	float specularLightWeighting;
	float diffuseLightWeighting;

	vec4 nm = (texture2D(uNormalMap, vTextureCoord.zw) - 0.5) * 2.0;
    vec3 n0 = nm.xyz;//max(nm.xyz, normalize(vNormal));
    vec3 normal = normalize(v_NMatrix*n0);

	//i=0
    vec3 lightDirection = normalize(pointLightsPositions[0] - vPosition.xyz);
	//float distance = length(dir);
	//float attenuation = 1.0/(1.0+0.1*distance+0.01*distance*distance);
    vec3 eyeDirection = normalize(-vPosition.xyz);
    vec3 reflectionDirection = reflect(-lightDirection, normal);	
	specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), pointLightsParamsf[0]);
    diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);
    lightWeighting += pointLightsParamsv[0] + pointLightsParamsv[1] * diffuseLightWeighting + pointLightsParamsv[2] * specularLightWeighting;

	vec4 uColor = texture2D( uSampler, vTextureCoord.xy );
	gl_FragColor = vec4(uColor.rgb * lightWeighting, uColor.a);
}