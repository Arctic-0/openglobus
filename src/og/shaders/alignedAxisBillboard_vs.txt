attribute vec3 a_vertices;
attribute vec2 a_texCoord;
attribute vec3 a_positions;
attribute vec3 a_offset;
attribute vec3 a_alignedAxis;
attribute vec2 a_size;
attribute float a_rotation;
attribute float a_opacity;

varying vec2 v_texCoords;
varying float v_opacity;

uniform mat4 uMVMatrix;
uniform mat4 uPMatrix;
uniform vec2 uViewSize;
uniform vec3 uCamPos;
uniform float uViewAngle;
uniform float uRatio;

void main() {
    v_texCoords = a_texCoord;
    v_opacity = a_opacity;

    vec3 look = normalize(uCamPos - a_positions);
	vec3 up = normalize(a_alignedAxis);
	vec3 right = normalize(cross(up,look));
	look = cross(right,up);

    float focalSize = 2.0 * length( a_positions - uCamPos ) * tan( uViewAngle ) / ( uViewSize.x / uRatio );
    vec2 offset = a_offset.xy * focalSize;
    vec2 scale = a_size * focalSize;
    float cosRot = cos(a_rotation);
    float sinRot = sin(a_rotation);
    vec3 rr = (right * cosRot - up * sinRot) * (scale.x * a_vertices.x + offset.x) + (right * sinRot + up * cosRot) * (scale.y * a_vertices.y + offset.y) + look * a_vertices.z + a_positions;

    gl_Position = uPMatrix * uMVMatrix * vec4(rr, 1);
	gl_Position.z += a_offset.z;
}