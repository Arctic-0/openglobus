precision highp float;

uniform sampler2D uNormalMap;

#define MAX_POINT_LIGHTS 1

uniform vec3 pointLightsPositions[MAX_POINT_LIGHTS];
uniform vec3 pointLightsParamsv[MAX_POINT_LIGHTS * 3];
uniform float pointLightsParamsf[MAX_POINT_LIGHTS];

#define MAX_TEX 8

uniform int numTex;
uniform sampler2D uSamplerArr[MAX_TEX];
uniform vec4 tcolorArr[MAX_TEX];
uniform lowp vec3 texBiasArr[MAX_TEX];
uniform sampler2D uGeoImage;

varying vec4 vTextureCoord;
varying vec3 vNormal;
varying vec4 vPosition;
varying mat3 v_NMatrix;
varying vec2 vTextureCoordClear;

void main(void) 
{
    vec4 nm = texture2D(uNormalMap, vTextureCoord.zw);
    vec3 normal = normalize(v_NMatrix * ((nm.xyz - 0.5) * 2.0));

    vec3 lightDirection = normalize(pointLightsPositions[0] - vPosition.xyz);
    //float distance = length(dir);
    //float attenuation = 1.0/(1.0+0.1*distance+0.01*distance*distance);
    vec3 eyeDirection = normalize(-vPosition.xyz);
    vec3 reflectionDirection = reflect(-lightDirection, normal);    

    float specularLightWeighting = pow(max(dot(reflectionDirection, eyeDirection), 0.0), pointLightsParamsf[0]);
    float diffuseLightWeighting = max(dot(normal, lightDirection), 0.0);
    vec3 lightWeighting = pointLightsParamsv[0] + pointLightsParamsv[1] * diffuseLightWeighting + pointLightsParamsv[2] * specularLightWeighting;


    lowp vec4 res = texture2D(uSamplerArr[0], texBiasArr[0].z * (vTextureCoord.xy + vec2(texBiasArr[0].x, texBiasArr[0].y)));

        for( int i = 1; i < MAX_TEX; i++ ) 
        {
            if( i < numTex) 
            {
                vec4 ti = texture2D(uSamplerArr[i], texBiasArr[i].z * (vTextureCoord.xy + texBiasArr[i].xy));
                res = mix(res, ti, tcolorArr[i].w * ti.a * smoothstep(0.35, 0.5, distance( ti.rgb, tcolorArr[i].xyz )));
            }
            else
            {
                break;
            }
        }

	vec4 geoImageColor = texture2D( uGeoImage, vTextureCoordClear.st );
    gl_FragColor = mix(res, geoImageColor, geoImageColor.a) * vec4(lightWeighting, 1.0);
}