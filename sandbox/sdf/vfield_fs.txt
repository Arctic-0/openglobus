precision highp float;

uniform sampler2D uTex1;
uniform bool uHPass;
uniform int uDistance;

varying vec2 TexCoord;
varying vec2 vTexSize;

const int maxDistance = 200;

float CalcC(float H, float V)
{
    return ( sqrt( H * H + V * V ) );
}

float CalcDistance(){
  float dist = CalcC( 0.0, texture2D( uTex1, TexCoord / vTexSize ).r );
  for ( int i = 1; i <= maxDistance; i++ )
  {
  	if(i > uDistance)
		break;

    float H = float(i) / float(uDistance);
    dist = min( dist, CalcC( H, texture2D( uTex1, ( TexCoord + vec2( float(i), 0.0) ) / vTexSize ).r ) );
    dist = min( dist, CalcC( H, texture2D( uTex1, ( TexCoord - vec2( float(i), 0.0) ) / vTexSize ).r ) );
  }
  return dist;
}

void main(){
	if( uHPass ) 
	{
	  float dist = CalcDistance();

	  //if( ( uMod16 != 0.0 ) && ( dist < 1.0 ) )
	  //{ 
	  //	dist = fract( dist * float(uDistance) / 15.999 );
	  //}
   
	  gl_FragColor = vec4(dist);
	  gl_FragColor.w = 1.0;

	}
	else
	{
	  if ( texture2D(uTex1, TexCoord / vTexSize).r > 0.5 )
	  {
		gl_FragColor = vec4(0.0,0.0,0.0,1.0);
		return;
	  }

	  for ( int i=1; i <= maxDistance; i++ )
	  {
		if(i > uDistance)
			break;

		if ( texture2D(uTex1, ( TexCoord + vec2(0.0, float(i)) ) / vTexSize ).r > 0.5 )
		{
			gl_FragColor = vec4( vec3(float(i)/float(uDistance)), 1.0 );
			return;
		}
		if ( texture2D(uTex1, ( TexCoord - vec2(0.0, float(i))) / vTexSize ).r > 0.5 )
		{
			gl_FragColor = vec4(vec3(float(i)/float(uDistance)), 1.0);
			return;
		}
	  }
	  gl_FragColor = vec4(1.0);  
	}
}
