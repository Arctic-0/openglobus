#extension GL_OES_standard_derivatives : enable

precision highp float;

varying vec4 v_TransformedNormal;
varying vec4 v_Position;
varying vec2 v_TextureCoord;
varying vec4 v_lightDirection;
varying vec4 v_EyeVec;


	
//uniform vec4 uColor;
uniform sampler2D uSampler;
uniform sampler2D uNormalsMap;
 
#define MAX_POINT_LIGHTS 1

uniform vec3 pointLightsParamsv[MAX_POINT_LIGHTS * 3];
uniform float pointLightsParamsf[MAX_POINT_LIGHTS];

varying mat3 v_NMatrix;

mat3 cotangent_frame(vec3 N, vec3 p, vec2 uv)
{
    // get edge vectors of the pixel triangle
    vec3 dp1 = dFdx( p );
    vec3 dp2 = dFdy( p );
    vec2 duv1 = dFdx( uv );
    vec2 duv2 = dFdy( uv );
 
    // solve the linear system
    vec3 dp2perp = cross( dp2, N );
    vec3 dp1perp = cross( N, dp1 );
    vec3 T = dp2perp * duv1.x + dp1perp * duv2.x;
    vec3 B = dp2perp * duv1.y + dp1perp * duv2.y;
 
    // construct a scale-invariant frame 
    float invmax = inversesqrt( max( dot(T,T), dot(B,B) ) );
    return mat3( T * invmax, B * invmax, N );
}

vec3 perturb_normal( vec3 N, vec3 V, vec2 texcoord )
{
    // assume N, the interpolated vertex normal and 
    // V, the view vector (vertex to eye)
    vec3 map = texture2D(uNormalsMap, texcoord ).xyz;
    map = map * 255./127. - 128./127.;
    mat3 TBN = cotangent_frame(N, -V, texcoord);
    return normalize(TBN * map);
}

void main(void) {

	vec2 uv = v_TextureCoord;
    vec3 N = normalize(v_TransformedNormal.xyz);
    vec3 L = normalize(v_lightDirection.xyz);
    vec3 V = normalize(v_EyeVec.xyz);
    
	vec3 PN = perturb_normal(N, V, uv);
	
    vec3 R = reflect(-L, PN);	
	
	float specular = pow(max(dot(R, V), 0.0), pointLightsParamsf[0]);
    float lambertTerm = max(dot(PN, L), 0.0);
    vec3 lightWeighting = pointLightsParamsv[0] + pointLightsParamsv[1] * lambertTerm + pointLightsParamsv[2] * specular;

	vec4 tColor = vec4(1.0);//texture2D( uSampler, v_TextureCoord.st );
        
    gl_FragColor = vec4(tColor.rgb * lightWeighting, 1.0);
}